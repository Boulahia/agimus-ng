#
# Utiliser ce fichier grok avec les fichier de logs applicatif issu du service CAS
# Cf : https://www.esup-portail.org/wiki/x/AoC-H
#
# Ligne d'exemple : 
#   [Tue Jul 07 07:05:07 CEST 2015] [IP:193.49.XXX.XX] [ID:seXXX] [TICKET:ST-18-7lx..gin-cas1] [SERVICE:https://lms.univ.fr/login.php] [USER-AGENT:Mozilla/5.0 ...]
#
input {
	stdin { }
}
filter {
	grok {
		match => [ "message", "\[%{DATA:requestdate}\] \[IP:%{IPORHOST:clientip}\] \[ID:%{NOTSPACE:uid}\] \[TICKET:%{NOTSPACE}\] \[SERVICE:%{DATA:[service][request]}\] \[USER-AGENT:%{DATA:[agent]}\]" ]		
	}
	grok {
		match => [ "message", "\[%{DATA}\] \[IP:%{IPORHOST}\] \[ID:%{NOTSPACE}\] \[TICKET:%{NOTSPACE}\] \[SERVICE:%{URIPROTO:[service][proto]}://(?:%{USER:[service][user]}(?::[^@]*)?@)?(?:%{URIHOST:[service][host]})?(?:%{URIPATH:[service][uripath]}(?:%{URIPARAM:[service][uriparam]})?)?\]" ]		
	}

	if "_grokparsefailure" not in [tags] {
		if [uid] =~ /^http.?:/ {
			mutate {
				add_field => { "not_user" => "%{uid}" }
			}
		} else  {   
			mutate {
				lowercase => [ "uid" ]
			}
			elasticsearch {
				hosts => ["localhost"]
				query => "_type:ldap AND _id:%{uid}"
				sort => ""
				fields => {
					__VOS_ATTRIBUTS_HASHES__
				}				
			}	   
	   
			if ![query_failed] {
				mutate {
					gsub => [ 
						"requestdate", "CEST", "+0200",
						"requestdate", "CET", "+0100"
						]
				}
				date {
					match => [ "requestdate", "EEE MMM dd HH:mm:ss Z yyyy" ]
					locale => "en"
					timezone => "Europe/Paris"
				}
				
				anonymize {
					algorithm => "SHA1"
					fields => [ "uid" ]
					key => "PASSWORD"
				}				
				geoip {
					source => "clientip"
					target => "geoip"	
				}				
				useragent {
					source => "agent"
				}		   
				 
				# Traduction edupersonprimaryaffiliation dans un format lisible
				# utilise le fichier mapping : maps/eduPersonPrimaryAffiliation.yaml 
				# exemple du fichier eduPersonPrimaryAffiliation.yaml, une ligne par mapping 
				#     "student": "étudiant"
				#
				#if [edupersonprimaryaffiliation] {
				#	translate {
				#		field => "edupersonprimaryaffiliation"
				#		destination => "edupersonprimaryaffiliationReadable"
				#		dictionary_path => "maps/eduPersonPrimaryAffiliation.yaml"
				#		exact => true
				#		fallback => "INCONNU"
				#	}
				#}
				
				## Utilise l'adresse IP pour détecter le type de réseau utilisé (wifi établissement, filaire établissement, externe, ...)
				#if [clientip] {
				#	# Detection des réseaux wifi WIFI
				#	# Adapté la liste de vos réseau WIFI
				#	cidr {
				#		add_field => { "[network][type]" => "wifi" }
				#		address => [ "%{clientip}" ]
				#		network => [ "XXX.XXX.XXX.XXX/XX" ]
				#	}
				#	
				#	# Detection des réseaux filaire
				#	if ![network][type] {
				#		cidr {
				#			add_field => { "[network][type]" => "wire" }
				#			address => [ "%{clientip}" ]
				#			network => [ "XXX.XXX.XXX.XXX/XX" , "XXX.XXX.XXX.XXX/XX" , "XXX.XXX.XXX.XXX/XX" ]
				#		}
				#	}
				#	
				#	# sinon c'est de l'externe
				#	if ![network][type] {
				#		mutate {
				#			add_field => { "[network][type]" => "external" }
				#		}
				#	}
				#}

				
			   

				mutate {
					convert => [ "[geoip][coordinates]", "float" ]				
					remove_field => [ "[geoip][ip]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][continent_code]", "[geoip][region_name]", "[geoip][latitude]", "[geoip][longitude]", "[geoip][timezone]","[geoip][real_region_name]", "[geoip][country_name]","[geoip][city_name]", "[geoip][dma_code]", "[geoip][ area_code]", "[geoip][postal_code]",   "response", "auth", "host", "method", "minor", "message", "httpversion", "os_major", "major", "agent","patch", "ident", "os_minor", "build", "requestdate" ]			
					rename => [ "name", "browser" ]				
				}				
			}
			else {
				mutate {
					add_field => { "no_ldap" => "%{uid}" }
				}
			}	   
		}
    }
}
output {
	if "_grokparsefailure" not in [tags] {
		if [not_user] {
			#No thing todo
		} else if [no_ldap] {
			stdout {
				codec => line { format => "pas de LDAP pour [%{no_ldap}]" } 
      	    }
		} else {
			# To DEBUG print to STDOUT
			#stdout { 
			#	 codec => rubydebug	 
			#}
			elasticsearch {
				host => "localhost"
				document_type => "casrequest"
				cluster => "Agimus"
				protocol => "transport"
			}
		}
	} else {
		stdout {
			codec => line { format => "probleme analyse grok pour : %{message}" }
		}
    }
}
