input {
    jdbc {
     jdbc_driver_library => "/opt/logstash/lib/mysql-connector-java-5.1.37-bin.jar"
     jdbc_driver_class => "com.mysql.jdbc.Driver"
     jdbc_connection_string => "jdbc:mysql://localhost:3306/moodle"
     jdbc_user => "agimus"
     jdbc_password => ""
     statement => "SELECT * FROM `mdl_logstore_standard_log` WHERE `timecreated` > UNIX_TIMESTAMP(DATE_SUB(CONCAT(CURDATE(), ' 00:03:01'), INTERVAL 1 DAY))" #ATTENTION : remplacer par le timestamp le plus récent de votre table des logs
        add_field => { 
            "[@metadata][type]" => "moodle-log-table"
        }
    }
}
filter {
    # ajout du nom de l'hôte (dans le cas des établissements ayant plusieurs plateformes Moodle)
    mutate {
        convert => { "id" => "string" }
        add_field => { "host" => "moodle2015" }    
    }
    # conversion du timestamp de la ligne de log en timestamp du document
    date {
        match => [ "timecreated", "UNIX" ]
        locale => "fr-FR"
        timezone => "Europe/Paris"
    }
    # localisation de l'adresse IP
    geoip {
        database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat" 
        source => "ip"
        target => "geoip"   
    }
    mutate {
        convert => [ "[geoip][coordinates]", "float" ]
    }
    # ajout du nom du cours lorsque courseid est présent, et du nom du diplôme (correspondant à la catégorie du cours : à adapter selon l'organisation des catégories de votre plateforme Moodle). 
    # il faut avoir complété l'index moodle-metadata (voir configuration logstash correspondante)
    if [courseid] != 1 and [courseid] != 0 {
        elasticsearch {
            hosts => ["localhost"]
            query => "_type:cours AND _id:%{courseid} AND host:moodle2015"
            sort => ""
            fields => {
                'nom' => 'courseName'
                'categorie_id' => 'categorie_id'
                'categorie' => 'categorie_diplome'
            }
        }
        # on remonte de parent en parent de la catégorie pour récupérer le niveau et le domaine du cours
        elasticsearch {
            hosts => ["localhost"]
            query => "_type:categorie AND _id:%{categorie_id} AND host:moodle2015"
            sort => ""
            fields => {
                'parent' => 'parent'
            }
        }
        # ajout du niveau du cours (correspondant à la catégorie de niveau 2 du cours : à adapter selon l'organisation des catégories de votre plateforme Moodle). 
        elasticsearch {
            hosts => ["localhost"]
            query => "_type:categorie AND _id:%{parent} AND host:moodle2015"
            sort => ""
            fields => {
                'parent' => 'parent2'
                'nom' => 'categorie_niveau'
            }
        }
        # ajout du domaine du cours (correspondant à la catégorie de niveau 3 du cours : à adapter selon l'organisation des catégories de votre plateforme Moodle). 
        elasticsearch {
            hosts => ["localhost"]
            query => "_type:categorie AND _id:%{parent2} AND host:moodle2015"
            sort => ""
            fields => {
                'nom' => 'categorie_domaine'
            }
        }
    }

    # recherche de l'identifiant LDAP de l'utilisateur à partir de son id Moodle (il faut avoir complété l'index moodle-metadata avec la correspondance user id moodle -> uid LDAP , voir configuration logstash correspondante)
    elasticsearch {
        hosts => ["localhost"]
        query => "_type:user AND _id:%{userid} AND host:moodle2015"
        sort => ""
        fields => {
            'nom' => 'uid'
        }
    }
    if [uid] =~ /.+/ {
        mutate {
            lowercase => ["uid"]
        }
        # ajout des attributs LDAP de l'utilisateur
        elasticsearch {
            hosts => ["localhost"]
                query => "_type:ldap AND _id:%{uid}"
                sort => ""
                fields => {
                    'eduPersonPrimaryAffiliation' => 'eduPersonPrimaryAffiliation'
                    'supannEntiteAffectationPrincipale' => 'supannEntiteAffectationPrincipale'
                    'supannEtuCursusAnnee' => 'supannEtuCursusAnnee'
                    'supannEtuSecteurDisciplinaire' => 'supannEtuSecteurDisciplinaire'
                    'supannEtuDiplome' => 'supannEtuDiplome'
                    'eduPersonAffiliation' => 'eduPersonAffiliation'
                    'supannCivilite' => 'supannCivilite'
                    'supannEtuRegimeInscription' => 'supannEtuRegimeInscription'
                    'supannEtuTypeDiplome' => 'supannEtuTypeDiplome'
                    'runUnivDateNaissance' => 'runUnivDateNaissance'
                }
                remove_field => [ "agimus" ]
        }
        if ![query_failed] {
            anonymize {
                algorithm => "SHA1"
                    fields => [ "uid" ]
                    key => "PASSWORD"
            }

            # Mapping des codes SISE et autres vers les labels correspondants   
            if [eduPersonPrimaryAffiliation] {
                translate {
                    field => "eduPersonPrimaryAffiliation"
                    destination => "eduPersonPrimaryAffiliationReadable"
                    dictionary_path => "maps/eduPersonPrimaryAffiliation.yaml"
                    exact => true
                    fallback => "INCONNU"
                }
            }

            if [supannEntiteAffectationPrincipale] {
                translate {
                    field => "supannEntiteAffectationPrincipale"
                    destination => "supannEntiteAffectationPrincipaleReadable"
                    dictionary_path => "maps/supannEntiteAffectationPrincipale.yaml"
                    exact => true
                    fallback => "INCONNU"
                }
            }

            if [supannEtuSecteurDisciplinaire] {
                translate {
                    field => "supannEtuSecteurDisciplinaire"
                    destination => "supannEtuSecteurDisciplinaireReadable"
                    dictionary_path => "maps/supannEtuSecteurDisciplinaire.yaml"
                    exact => true
                    fallback => "INCONNU"
                }
            }

            if [supannCivilite] {
                translate {
                    field => "supannCivilite"
                    destination => "sexe"
                    dictionary_path => "maps/supannCivilite.yaml"
                    exact => true
                    fallback => "INCONNU"
                }
            }

            if [supannEtuRegimeInscription] {
                translate {
                    field => "supannEtuRegimeInscription"
                    destination => "supannEtuRegimeInscriptionReadable"
                    dictionary_path => "maps/supannEtuRegimeInscription.yaml"
                    exact => true
                    fallback => "INCONNU"
                }
            }

            if [supannEtuTypeDiplome] {
                translate {
                    field => "supannEtuTypeDiplome"
                    destination => "supannEtuTypeDiplomeReadable"
                    dictionary_path => "maps/supannEtuTypeDiplome.yaml"
                    exact => true
                    fallback => "INCONNU"
                }
            }
            #traduction et agrégation des modules Moodle
            if [component] {
                translate {
                    field => "component"
                    destination => "module"
                    dictionary_path => "maps/map-moodle-activites.yml"
                    exact => true
                    fallback => "INCONNU"
                }
            }

            mutate {
                remove_field => [ "[geoip][ip]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][continent_code]", "[geoip][region_name]", "[geoip][latitude]", "[geoip][longitude]", "[geoip][timezone]","[geoip][real_region_name]", "[geoip][country_name]","[geoip][city_name]", "[geoip][dma_code]", "[geoip][ area_code]", "[geoip][postal_code]", "[geoip][continent_code]", "[geoip][real_region_name]", "response", "auth", "host", "method", "minor", "message", "httpversion", "os_major", "major", "agent","patch", "ident", "os_minor", "lameent","build", "requestdate", "categorie_id", "parent", "parent2" ]
            }
        }
    }
    else {
        mutate {
            add_field => { "no_ldap" => "%{userid}" }
        }
    }
}
output{
    #stdout{codec=>rubydebug}
    elasticsearch {
                index => "moodle-log-table"
                hosts => "localhost"
                document_id => "%{id}"
                document_type => "%{[@metadata][type]}"      
    }
}